// 컴포넌트
// 프런트엔드 개발에서 컴포넌트(component)는
// 웹 애플리케이션의 UI를 구성하는 독립적이고, 재사용 가능한 코드 조각(모음)입니다.

// 보통 HTML, CSS, 자바스크립트를 포함하며, 특정 기능이나 디자인을 담당합니다.
// 컴포넌트를 사용해서 애플리케이션의 복잡성을 줄이고, 쉽게 유지보수 할 수 있으므로
// 현대 웹 개발에서는 필수적인 개념입니다.

// 컴포넌트 장점
// 1. 재사용성
// 같은 컴포넌트를 여러 영역에서 활용할 수 있어 코드 중복을 줄이고, 효율성을 높일 수 있습니다.

// 특히 전통적인 MPA(Multi Page Appplication) 구조에서는
// 각 페이지가 독립적으로 동작하기 때문에, 공통죄는 레이아웃이나 UI 코드를 반복해서 작성하는 경우가 많다
// 반면, 컴포넌트 기반 개발 방식에서는 이러한 공통 요소를 하나의 컴포넌트로 만들어 재사용할 수 있어
// 유지보수가 쉬워지고 개발 속도도 빨라집니다.

// 2. 컴포넌트 내부의 상태 state와 로직은 외부에 노출되지 않아 독립성이 유지됩니다.
// HTML CSS는 고정된 틀이지만, 그 안에서 다루는 데이터는 동적으로 변할 수 있습니다.
// 컴포넌트는 이런 변화를 유연하게 처리할 수 있도록 설계되어 있으며,
// 주로 내부의 상태(state)를 활용하거나 ,
// 상위 컴포넌트로부터 전달받은 값(props)을 통해 동작합니다.

// 3. 확장성
// 여러 개의 컴포넌트를 조합해 더 복잡한 UI를 구성할 수 있습니다.
// 예를 들어 버튼(Button), 입력 필드(Input Field), 카드(Card) 등 작은 단위의 컴포넌트를 조합해
// 폼, 레이아웃, 페이지 등을 만들 수 있습니다.
// 쉽게 말해, 컴포넌트 + 컴포넌트 = 새로운 컴포넌트라고 생각하면 됩니다.

// Props
// Props는 React에서 부모 컴포넌트가 자식 컴포넌트로, 상위 컴포넌트에서 하위 컴포넌트로 데이터를 전달하는 매커니즘입니다.
// 부모 컴포넌트가 정의한 데이터를 자식 컴포넌트에게 전달하여, 컴포넌트 간 데이터 흐름을 효율적으로 관리할 수 있습니다.

// Props는 2가지 규칙을 따릅니다.
// 1. 단방향 데이터 흐름(one-way data flow): 데이터는 항상 부모에서 자식 방향으로만 전달되며, 자식 컴포넌트는 전달받은 데이터를 직접 수정할 수 없다.
// 2. 읽기 전용(readonly): props는 자식 컴포넌트에서 수정할 수 없고 조회와 출력에만 사용한다.

// 이러한 규칙 덕분에 데이터 흐름을 예측할 수 있고, 애플리케이션의 구조가 명확해져 유지보수가 쉬워집니다.
// Props의 깊이가 깊어지면, 데이터 추적이 어려울 수 있습니다.

// 위와 같은 문제 때문에 중앙 집중식 상태 관리 라이브러리인 Redux, Redux Toolkit, Recoil, Jotai, Zustand 등이 탄생이 되었습니다.
// 공통적으로 사용되는 상태(state)의 묶음 관리하거나 혹은 개별적으로 관리할 수 있습니다.
